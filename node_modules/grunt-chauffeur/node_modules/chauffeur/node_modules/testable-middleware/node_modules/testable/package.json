{
  "name": "testable",
  "version": "0.3.2",
  "description": "Client side test runner generator",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com:joeytrapp/node-testable.git"
  },
  "author": {
    "name": "Joey Trapp"
  },
  "license": "MIT",
  "devDependencies": {
    "grunt-contrib-watch": "~0.4.4",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt": "~0.4.1",
    "grunt-contrib-nodeunit": "~0.2.0"
  },
  "dependencies": {
    "ejs": "~0.8.4",
    "glob": "~3.2.1",
    "extend": "~1.1.3"
  },
  "readme": "# Testable\n\nLibrary that generates the html for a browser test runner.\n\n## Usage\n\n\tvar testable = require('testable');\n\t\n\t// Get the final html string (default is qunit)\n\ttestable.markup();\n\t\n\t// Get markup for jasmine test runner.\n\ttestable.markup({ framework: 'jasmine' });\n\t\n\t// Get the absolute path to a the directory of bundled assets\n\ttestable.assetsPath();\n\t\n## Config\n\n### config.framework\n\nSet what built in test framework adapter to use.\n\nBundled adapters: `qunit` (default), `jasmine`, and `mocha`.\n\n### config.files\n\nArray of strings that are the files to be loaded in the test runner. These strings are passed through [node-glob](https://github.com/isaacs/node-glob). Files included here are filtered, and css files are included in the page `head`, and js files are included in order in the page `body`.\n\n### config.tests\n\nArray of strings that works exactly like `files`. This should include the files that have your tests. `files` and `tests` have to be separate because code can be injected in between the files script tags and the tests script tags.\n\n### config.transformPath\n\nThis options can be a string or a function. In the resulting html, the paths to the files in the `files` configuration will be relative to `process.cwd()`. Those paths may not be reachable by the browser depending on how the webserver is setup. `transformPath` can modify each path to something that is reachable.\n\nWhen `transformPath` is a string, it is used as the search in a call to `String.replace()`. If the `files` option is set to `['tmp/build/js/**/*.js']` and `transformPath` is `tmp/build/`, then in the browser, the script tag src attributes will be `js/...`.\n\n`transformPath` can also be a function which gets the src path as a param and returns the path that should be set in the browser.\n\n### config.adapter\n\nSee section at the bottom about custom adapters.\n\n### config.chai (mocha framework only)\n\nWhen using the `mocha` framework, the `chai` configuration option is used to choose what type of assertion style to use with chai. See [chaijs.org](http://chaijs.com/) for more information. Valid options are `expect` (default), `assert`, and `should`.\n\n### config.style (mocha framework only)\n\nWhen using the `mocha` framework, the `style` configuration option is used to set the spec syntax for mocha. See [mocha interfaces](http://visionmedia.github.io/mocha/#interfaces) for more information. Valid options are `bdd` (default), `tdd`, `exports`, and `qunit`.\n\n## Example\n\nHere is a quick example app using [Express.js](http://expressjs.com/).\n\n\tvar express = require('express'),\n\t\ttestable = require('testable'),\n\t\tapp = express(), testableConfig;\n\t\t\n\ttestableConfig = {\n\t\tframework: 'qunit',\n\t\tfiles: ['public/js/app.js'],\n\t\ttests: ['public/test/**/*_test.js'],\n\t\ttransformPath: 'public/'\n\t};\n\t\n\t// Make testable assets available\n\tapp.use(express.static(testable.assetsPath()));\n\tapp.use(express.static(__dirname + '/public'));\n\t\n\tapp.get('/test.html', function(req, res) {\n\t\tres.setHeader('Content-Type', 'text/html');\n\t\tres.end(testable.markup(testableConfig));\n\t});\n\t\n\tapp.listen(8000);\n\t\nAlso check out [testable-middleware](https://github.com/joeytrapp/node-testable-middleware) to use testable with Connect or Express.\n\n## Custom Adapters\n\nTo add support for new testing frameworks, or your own framework, you could create a custom adapter. An adapter is simply an object that exposes five methods:\n\n\tadapter: {\n\t\tcss: function() { return ['custom.css']; },\n\t\tlibs: function() { return ['custom.js']; },\n\t\tmarkup: function() {\n\t\t\treturn '<div id=\"custom-framework\"></div>';\n\t\t},\n\t\textras: function() {\n\t\t\treturn '<script>MyFramework.setup(config);</script>';\n\t\t},\n\t\tstartup: function() {\n\t\t\treturn '<script>MyFramework.run();</script>';\n\t\t}\n\t}\n\n### adapter.css\n\nAn array of css files necessary for the test framework.\n\n### adapter.libs\n\nAn array js files necessary for the test framework.\n\n### adapter.markup\n\nMost frameworks require a small html snippet added to the body. The string returned from `adapter.markup()` is the first thing added to the test runner body tag.\n\n### adapter.extras\n\nThe string returned from this method is added to the test runner markup between the `config.files` script tags and the the `config.tests` script tags.\n\n### adapter.startup\n\nThe string returned from this method is the last thing added to the test runner.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joeytrapp/node-testable/issues"
  },
  "_id": "testable@0.3.2",
  "dist": {
    "shasum": "7640932b8439db8a28843dd26c30f3e7f78a2af2"
  },
  "_from": "testable@~0.3.2",
  "_resolved": "http://registry.npmjs.org/testable/-/testable-0.3.2.tgz"
}
