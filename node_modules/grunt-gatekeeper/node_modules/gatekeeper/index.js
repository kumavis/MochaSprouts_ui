var program          = require('commander'),
    fs               = require('fs'),
    path             = require('path'),
    server           = require('./lib/server');
    configDefaults   = require('./data/config'),
    GatekeeperConfig = require('./lib/gatekeeper_config');

program
  .command('init [name]')
  .description('Write a default [name].json into current directory. [name] defaults to gatekeeper')
  .action(function(name) {
    var filepath;
    if (!name) name = 'gatekeeper';
    filepath = path.join(process.cwd(), name + '.json');
    fs.readFile(path.join(__dirname, 'data', 'config.json'), function(err, data) {
      fs.writeFile(filepath, data, function() {
        console.log('Created ' + name + '.json');
      });
    });
  });

program
  .command('server')
  .description('Start a gatekeeper server that forwards to another web service')
  .option('-p, --port <port>', 'Port that gatekeeper should run on defaults to 9000 for http and 9443 for https')
  .option('-s, --https', 'Run gatekeeper server in https mode')
  .option('-o, --offline', 'Run gatekeeper server in offline mode')
  .option('-c, --conf <file>', 'Use json file to overwrite some default options. See `gatekeeper init`')
  .option('--no-csrf', 'Disable the csrf check')
  .option('--forward-host <host>', 'Host of the web service that gatekeeper will forward to')
  .option('--forward-port <port>', 'Port of host the webservice that gatekeeper will forward to is on')
  .action(function(options) {
    var config = new GatekeeperConfig(configDefaults),
        opts = {},
        base = '';

    if (options.conf) {
      if (!options.conf[0] === '/') base = process.cwd()
      opts = JSON.parse(fs.readFileSync(path.join(base, options.conf)));
    }
    if (options.port) opts.port = options.port;
    if (options.https !== undefined) opts.https = options.https;
    if (options.offline !== undefined) opts.offline = options.offline;
    if (options.forwardHost) opts.forwardHost = options.forwardHost;
    if (options.forwardPort) opts.forwardPort = options.forwardPort;
    if (options.csrf) opts.csrf = options.csrf;
    config.extend(opts);
    server(config);
  });

program.parse(process.argv);

