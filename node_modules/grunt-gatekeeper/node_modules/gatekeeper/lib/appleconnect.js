// AppleConnect middleware for node.js connect

var extend            = require('xtend'),
    request           = require('request'),
    TEST_DOMAIN       = 'dsauthweb-uat.corp.apple.com',
    TEST_COOKIE       = 'myacinfo-uat',
    PRODUCTION_DOMAIN = 'dsauthweb.corp.apple.com',
    PRODUCTION_COOKIE = 'myacinfo',

    defaultOptions = {
      appId:            1715,
      appIdKey:         '435b8d454dd6a8ca9e9752a4314f81f00b51eeafe92e8350b0c5fe098788a5e8',
      appAdminPassword: 'n4kufrji216v7n8',

      useProductionDomain: false,

      redirectOnFailure: false,

      timeout: 10*60*1000, // 10 Minutes

      rv: null,

      isOffline:    false,
      offlineUser:  {
        'prsId':        '1363849936',
        'emailAddress': 'alex_goodwin@apple.com',
        'firstName':    'Alex',
        'lastName':     'Goodwin',
        'nickName':     'Alex',
        'prsTypeCode':  '3',
        'allGroups':    '0;54076;55264;60878;94821;99047;99109;102513;154629;501373;511284;515572;515576;520643;527306;549805;559289;568978;569095;570327;574549;579067;584322;585057;585828;607070;607079;610090;1523518;1531022;1531803;1542549;1543767;2501016;2501023;1000004058;1000004896;1000006086;1000006087;1000042848;1000042849;1000042850;1000045466;1000056552;1000056627;1000080551;1000080688;1000122852;1000307620;1000316752;1000363072;'
      },

      paths: {
        login:    '/cgi-bin/WebObjects/DSAuthWeb.woa/wa/login',
        validate: '/cgi-bin/WebObjects/DSAuthWeb.woa/wa/validate'
      },

      onSuccess: function(req, res, options, appleConnectData, next) {
        req.headers['x-appleconnect-dsid']     = appleConnectData.prsId;
        req.headers['x-appleconnect-type']     = getPersonTypeName(appleConnectData.prsTypeCode);
        req.headers['x-appleconnect-email']    = appleConnectData.emailAddress;
        req.headers['x-appleconnect-groups']   = appleConnectData.allGroups;
        req.headers['x-appleconnect-first']    = appleConnectData.firstName;
        req.headers['x-appleconnect-last']     = appleConnectData.lastName;
        req.headers['x-appleconnect-nick']     = appleConnectData.nickName;

        res.setHeader('X-AppleConnect-DSID', appleConnectData.prsId);
        res.setHeader('X-AppleConnect-Type', getPersonTypeName(appleConnectData.prsTypeCode));
        res.setHeader('X-AppleConnect-Email', appleConnectData.emailAddress);
        res.setHeader('X-AppleConnect-Groups', appleConnectData.allGroups);
        res.setHeader('X-AppleConnect-First', appleConnectData.firstName);
        res.setHeader('X-AppleConnect-Last', appleConnectData.lastName);
        res.setHeader('X-AppleConnect-Nick', appleConnectData.nickName);
        next();
      }
    };

function onFailureRedirect(req, res, loginUrl, options, appleConnectData, next) {
  //loginUrl = loginUrl + '&path=' + req.url;
  res.writeHead(303,
    {Location: loginUrl}
  );
  res.end();
}

function defaultFailureJSON(appleConnectData, loginUrl) {
  return {
    appleConnect: {
      status:   appleConnectData.status,
      reason:   appleConnectData.reason,
      loginUrl: loginUrl
    }
  };
}

function onFailureBuildJSONResponse(jsonBuildFunction) {
  if (!jsonBuildFunction) {
    jsonBuildFunction = defaultFailureJSON;
  }
  return function(req, res, loginUrl, options, appleConnectData, next) {
    var response = jsonBuildFunction(appleConnectData, loginUrl);
    res.writeHead(401, {
      'Content-Type': 'application/json'
    });
    res.write(JSON.stringify(response));
    res.end();
  }
};

function getCookieName(options) {
  if (options.useProductionDomain) {
    return PRODUCTION_COOKIE;
  } else {
    return TEST_COOKIE;
  }
}

function getDomain(options) {
  if (options.useProductionDomain) {
    return PRODUCTION_DOMAIN;
  } else {
    return TEST_DOMAIN;
  }
}

function checkCookie(req, res, options, callbacks) {
  cookie = req.cookies[getCookieName(options)];
  if (cookie) {
    requestAppleConnectData(req, res, cookie, options, callbacks);
  } else {
    return callbacks.isInvalid('No cookie');
  }
}

function requestAppleConnectData(req, res, cookie, options, callbacks) {
  var reqData = {
    ip:               req.connection.remoteAddress,
    cookie:           cookie,
    appId:            options.appId,
    appAdminPassword: options.appAdminPassword,
    func:             'firstName;nickName;lastName;emailAddress;allGroups;prsId;prsTypeCode;'
  };

  if (options.forceIp) {
    reqData.ip = options.forceIp;
  }

  url = 'https://' + getDomain(options) + options.paths.validate;

  request({
    url: url,
    qs: reqData,
  }, function(error, response, body) {
    var appleConnectData = parseAppleConnectData(body);
    if (appleConnectData.status == '0') {
      appleConnectData.validated = (new Date()).getTime();
      req.session.AppleConnect = appleConnectData;
      callbacks.isValid(appleConnectData);
    } else {
      callbacks.isInvalid(appleConnectData);
    }
  });
}

function parseAppleConnectData(text) {
  var appleConnectData = {};
  text.split('\n').forEach(function(line) {
    if (line && line.indexOf('=') != -1) {
      var parts = line.split('=');
      appleConnectData[parts[0]] = parts[1];
    }
  });
  return appleConnectData;
}

function getPersonTypeName(id) {
  id = parseInt(id);
  var type = require('../data/person_types').filter(function(item) {
    return (item.id == id);
  })[0];
  if (type) {
    return type.name;
  }
}

exports.getPersonTypeName = getPersonTypeName;

exports.authenticate = function(options) {
  options = extend(defaultOptions, options);

  return function(req, res, next) {
    if (options.isOffline && options.offlineUser) {
      req.session.AppleConnect = options.offlineUser;
      options.onSuccess(req, res, options, options.offlineUser, next);
    } else {
      if (req.session.AppleConnect) {
        var validated = req.session.AppleConnect.validated,
            now = (new Date()).getTime();

        if ((now - validated) <= options.timeout) {
          options.onSuccess(req, res, options, req.session.AppleConnect, next);
          return
        }
      }
      checkCookie(req, res, options, {
        isValid: function(appleConnectData) {
          options.onSuccess(req, res, options, appleConnectData, next);
        },
        isInvalid: function(appleConnectData) {
          var loginUrl = 'https://' + getDomain(options) + options.paths.login;
          loginUrl += '?appIdKey=' + options.appIdKey

          if (options.rv != null) {
            loginUrl += '&rv=' + options.rv;
          }

          if (options.redirectOnFailure) {
            onFailureRedirect(req, res, loginUrl, options, appleConnectData, next);
          } else {
            onFailureBuildJSONResponse()(req, res, loginUrl, options, appleConnectData, next);
          }
        }
      });
    }
  }
};
