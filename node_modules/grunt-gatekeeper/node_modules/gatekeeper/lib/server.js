module.exports = function(config) {
  var https          = require('https'),
      http           = require('http'),
      fs             = require('fs'),
      path           = require('path'),
      connect        = require('connect'),
      gatekeeper     = require('./gatekeeper'),
      formalize      = require('./formalize_destination_message'),
      app            = connect(),
      clientSessionSettings, includeResponseHeaders,
      proxyDestination, httpsOptions, appleConnectOptions;

  function serverMessage(isHttps, port, destination, isOffline, isCSRF) {
    var http = isHttps ? 'https' : 'http',
        str = 'Gatekeeper ' + http + ' server started on port ' + port + ' forwarding to ' + destination;

    if (isOffline) str += ' in offline mode';
    if (!isCSRF) str += ' with csrf disabled';
    console.log(str);
  }

  function isFileProtocol(host) {
    host = host.toLowerCase();
    return !!host.match(/^file:\/\//)
  }

  function getFilesystemPathFromUrl(url) {
    return url.replace(/^file:\/\//, '')
  }

  clientSessionSettings = {
    cookieName: config.get('sessionCookieName') || 'gatekeeper_session',
    secret:     config.get('sessionSecret'),
    duration:   config.get('sessionDuration') || 30*60*1000
  };

  includeResponseHeaders = config.get('includeResponseHeaders') || [];

  proxyDestination = config.get('destinationServers');
  if (!Array.isArray(proxyDestination)) {
    if (isFileProtocol(config.get('forwardHost'))) {
      config.set('assetPath', getFilesystemPathFromUrl(config.get('forwardHost')));
    } else {
      proxyDestination = [{
        host: config.get('forwardHost'),
        port: config.get('forwardPort')
      }];
    }
  }

  httpsOptions = {
    key: config.get('sslKey'),
    cert: config.get('sslCert')
  };

  appleConnectOptions = config.get('appleConnectOptions');

  if (config.get('offline') !== undefined) {
    appleConnectOptions.isOffline = config.get('offline');
  }

  app.use(gatekeeper.handleCORSPreFetch());
  if (config.get('https')) {
    app.use(function(req, res, next) {
      if (!req.connection.encrypted) {
        res.writeHead(303,
          {
            Location: 'https://' + req.headers.host + req.url
          }
        );
        res.end();
      } else {
        next();
      }
    });
  }

  if (config.get('gzip')) {
    app.use(connect.compress());
  }
  app.use(gatekeeper.setupProxy());
  app.use(connect.cookieParser());
  app.use(gatekeeper.setupClientSessions(clientSessionSettings));
  if (config.get('csrf')) {
    app.use(connect.csrf());
    app.use(gatekeeper.setCSRF());
  }
  app.use(gatekeeper.includeResponseHeaders(includeResponseHeaders));
  app.use(gatekeeper.appleconnect(appleConnectOptions));
  app.use(gatekeeper.whoami());

  if (config.get('assetPath')) {
    app.use(connect.static(config.get('assetPath')));
    if (config.get('defaultStaticFile')) {
      app.use(function(req, res, next) {
        var filePath = path.join(config.get('assetPath'), config.get('defaultStaticFile'));
        var rs = fs.createReadStream(filePath);
        rs.pipe(res);
      });
    }
  } else {
    app.use(gatekeeper.finalizeProxy(proxyDestination));
  }

  if (config.get('https')) {
    https.createServer(httpsOptions, app).listen(config.get('httpsPort'));
    http.createServer(app).listen(config.get('port'));
  } else {
    http.createServer(app).listen(config.get('port'));
  }

  serverMessage(config.get('https'),
                config.get('port'),
                config.get('assetPath') || formalize(proxyDestination),
                config.get('offline'),
                config.get('csrf'));
};

